# -*- coding: utf-8 -*-
"""CAR DATASET KAGGLE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRSe8NQaNH7p7dNDmaKvQpUex5KxvMCu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

car = pd.read_csv('/content/cardata.csv')

car.head()

car.shape

car.size

car.info()

car.isnull().sum()

car['Car_Name'].unique()

car['Car_Name'].value_counts()

car.groupby('Fuel_Type').mean(numeric_only=True)

car.describe()

car.hist(figsize=(10,10))
plt.show()

pyplot = car.plot(kind='density', subplots=True, layout=(3,3), sharex=False)

plt.figure(figsize=(5,5))
plt.bar(car['Fuel_Type'], car['Selling_Price'])
plt.xlabel('Fuel_Type')
plt.ylabel('Selling_Price')
plt.show()

sns.pairplot(car)

sns.lineplot(x='Year', y='Selling_Price', data=car)
plt.title('Year vs Selling Price')
plt.show()

sns.boxplot(x='Fuel_Type', y='Selling_Price', data=car)
plt.title('Fuel Type vs Selling Price')
plt.show()

car.head()

X = car.drop(['Car_Name','Fuel_Type','Seller_Type','Transmission'], axis=1)
Y = car[['Car_Name','Fuel_Type','Seller_Type','Transmission']]

print(X)

print(Y)

scaler = StandardScaler()
model = LogisticRegression()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)





model.fit(X_train, Y_train['Fuel_Type'])

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train['Fuel_Type'])
print('The Accuracy Score of the Training Data is ',training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test['Fuel_Type'])
print('The Accuracy Score of the Test Data is ',test_data_accuracy)

car.head(10)

import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
input_data = (2014, 3.35, 5.59, 190, 110, 3.19, 19.0, 0, 7)
relevant_input_data = input_data[:5]
input_data_as_numpy_array = np.asarray(relevant_input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
relevant_columns = car[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven', 'Fuel_Type']]
label_encoder = LabelEncoder()
relevant_columns['Fuel_Type_Encoded'] = label_encoder.fit_transform(relevant_columns['Fuel_Type'])
scaler = StandardScaler().fit(relevant_columns.drop('Fuel_Type', axis=1))
fuel_type_encoded = label_encoder.transform(['Petrol','Diesel'])
input_data_processed = np.array(input_data[:4] + (fuel_type_encoded[0],)).reshape(1, -1)
input_data_scaled = scaler.transform(input_data_processed)
prediction = model.predict(input_data_scaled)
print("Raw Prediction Output:", prediction)

if prediction == 'Petrol':
    print('The car runs on Petrol')
else:
    print('The car runs on Diesel')

